#ifndef HAVE_DEFINED_set_H
#define HAVE_DEFINED_set_H

// Automaticaly generated by script/produce_module_declaration_h.pl.

bool disjoint_set_equivalent_p(s_disjoint_set_t *disjoint_set, uint32 index_fir, uint32 index_sec);
s_disjoint_set_t * disjoint_set_create(uint32 size);
static inline bool disjoint_set_element_top_p(s_disjoint_set_t *disjoint_set, uint32 index);
static inline bool disjoint_set_element_value_top_p(sint32 element);
static inline bool disjoint_set_equivalent_ip(s_disjoint_set_t *disjoint_set, uint32 index_fir, uint32 index_sec);
static inline bool disjoint_set_structure_illegal_p(s_disjoint_set_t *disjoint_set);
static inline bool disjoint_set_structure_legal_p(s_disjoint_set_t *disjoint_set);
static inline sint32 disjoint_set_element(s_disjoint_set_t *disjoint_set, uint32 index);
static inline uint32 disjoint_set_element_size(s_disjoint_set_t *disjoint_set, uint32 index);
static inline uint32 disjoint_set_find_i(s_disjoint_set_t *disjoint_set, uint32 index);
static inline uint32 disjoint_set_size_i(s_disjoint_set_t *disjoint_set);
static inline void disjoint_set_element_set(s_disjoint_set_t *disjoint_set, uint32 index, sint32 element);
static inline void disjoint_set_element_top_increase(s_disjoint_set_t *disjoint_set, uint32 index_top);
static inline void disjoint_set_initial(s_disjoint_set_t *disjoint_set);
static inline void disjoint_set_union_by_size(s_disjoint_set_t *disjoint_set, uint32 index_fir, uint32 index_sec);
uint32 disjoint_set_find(s_disjoint_set_t *disjoint_set, uint32 index);
uint32 disjoint_set_size(s_disjoint_set_t *disjoint_set);
void disjoint_set_destroy(s_disjoint_set_t **disjoint_set);
void disjoint_set_union(s_disjoint_set_t *disjoint_set, uint32 index_fir, uint32 index_sec);

#endif

