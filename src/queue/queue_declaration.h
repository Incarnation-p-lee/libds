#ifndef HAVE_DEFINED_queue_H
#define HAVE_DEFINED_queue_H

// Automaticaly generated by script/produce_module_declaration_h.pl.

bool array_queue_empty_p(s_array_queue_t *queue);
bool array_queue_full_p(s_array_queue_t *queue);
bool array_queue_structure_legal_p(s_array_queue_t *queue);
bool doubly_end_queue_empty_p(s_doubly_end_queue_t *queue);
bool doubly_end_queue_structure_legal_p(s_doubly_end_queue_t *queue);
bool stacked_queue_empty_p(s_stacked_queue_t *queue);
bool stacked_queue_full_p(s_stacked_queue_t *queue);
s_array_iterator_t * array_queue_iterator_obtain(s_array_queue_t *queue);
s_array_queue_t * array_queue_create(void);
s_doubly_end_queue_t * doubly_end_queue_create(void);
s_stacked_queue_t * stacked_queue_create(void);
static inline ALWAYS_INLINE bool array_queue_empty_ip(s_array_queue_t *queue);
static inline ALWAYS_INLINE bool array_queue_full_ip(s_array_queue_t *queue);
static inline bool array_queue_enter_optimize_legal_p(s_array_queue_t *queue, void *member);
static inline bool array_queue_iterator_next_exist_p(void *queue);
static inline bool array_queue_leave_optimize_legal_p(s_array_queue_t *queue);
static inline bool array_queue_resize_front_to_rear_p(s_array_queue_t *queue);
static inline bool array_queue_space_structure_legal_p(s_array_queue_space_t *space);
static inline bool array_queue_structure_legal_ip(s_array_queue_t *queue);
static inline bool doubly_end_queue_empty_ip(s_doubly_end_queue_t *queue);
static inline bool doubly_end_queue_list_structure_legal_p(s_doubly_end_queue_list_t *list);
static inline bool stacked_queue_empty_ip(s_stacked_queue_t *queue);
static inline bool stacked_queue_structure_legal_p(s_stacked_queue_t *queue);
static inline s_doubly_end_queue_list_t * doubly_end_queue_list_next(s_doubly_end_queue_list_t *node);
static inline s_doubly_end_queue_list_t * doubly_end_queue_list_previous(s_doubly_end_queue_list_t *node);
static inline s_doubly_end_queue_list_t * doubly_end_queue_list_reflect(s_doubly_linked_list_t *list);
static inline uint32 stacked_queue_rest_i(s_stacked_queue_t *queue);
static inline void * array_queue_iterator_next_obtain(void *queue);
static inline void array_queue_iterator_index_initial(void *queue);
static inline void array_queue_resize_expand(s_array_queue_t *queue, uint32 size, void **addr);
static inline void array_queue_resize_i(s_array_queue_t *queue, uint32 size);
static inline void array_queue_resize_narrow(s_array_queue_t *queue, uint32 size, void **addr);
static inline void doubly_end_queue_cleanup_i(s_doubly_end_queue_t *queue);
static inline void doubly_end_queue_last_node_clean(s_doubly_end_queue_t *queue);
static inline void stacked_queue_resize_i(s_stacked_queue_t *queue, uint32 dim);
static inline void stacked_queue_stack_dump(s_array_stack_t *from, s_array_stack_t *to);
uint32 array_queue_capacity(s_array_queue_t *queue);
uint32 array_queue_rest(s_array_queue_t *queue);
uint32 doubly_end_queue_length(s_doubly_end_queue_t *queue);
uint32 stacked_queue_capacity(s_stacked_queue_t *queue);
uint32 stacked_queue_rest(s_stacked_queue_t *queue);
void * array_queue_front(s_array_queue_t *queue);
void * array_queue_leave(s_array_queue_t *queue);
void * array_queue_rear(s_array_queue_t *queue);
void * doubly_end_queue_front(s_doubly_end_queue_t *queue);
void * doubly_end_queue_front_leave(s_doubly_end_queue_t *queue);
void * doubly_end_queue_rear(s_doubly_end_queue_t *queue);
void * doubly_end_queue_rear_leave(s_doubly_end_queue_t *queue);
void * stacked_queue_front(s_stacked_queue_t *queue);
void * stacked_queue_leave(s_stacked_queue_t *queue);
void * stacked_queue_rear(s_stacked_queue_t *queue);
void array_queue_cleanup(s_array_queue_t *queue);
void array_queue_destroy(s_array_queue_t **queue);
void array_queue_enter(s_array_queue_t *queue, void *member);
void array_queue_iterate(s_array_queue_t *queue, void (*handler)(void *));
void array_queue_resize(s_array_queue_t *queue, uint32 size);
void doubly_end_queue_cleanup(s_doubly_end_queue_t *queue);
void doubly_end_queue_destroy(s_doubly_end_queue_t **queue);
void doubly_end_queue_front_enter(s_doubly_end_queue_t *queue, void *member);
void doubly_end_queue_iterate(s_doubly_end_queue_t *queue, void (*handle)(void *));
void doubly_end_queue_rear_enter(s_doubly_end_queue_t *queue, void *member);
void stacked_queue_cleanup(s_stacked_queue_t *queue);
void stacked_queue_destroy(s_stacked_queue_t **queue);
void stacked_queue_enter(s_stacked_queue_t *queue, void *member);
void stacked_queue_iterate(s_stacked_queue_t *queue, void (*handler)(void *));
void stacked_queue_resize(s_stacked_queue_t *queue, uint32 dim);

#endif

