#ifndef HAVE_DEFINED_tree_H
#define HAVE_DEFINED_tree_H

// Automaticaly generated by script/produce_module_declaration_h.pl.

bool avl_tree_balanced_p(struct avl_tree *tree);
bool avl_tree_contains_p(struct avl_tree *tree, struct avl_tree *node);
bool binary_search_tree_contains_p(struct binary_search_tree *tree, struct binary_search_tree *node);
bool splay_tree_contains_p(struct splay_tree *tree, struct splay_tree *node);
sint32 avl_tree_height(struct avl_tree *tree);
sint32 binary_search_tree_height(struct binary_search_tree *tree);
sint32 splay_tree_height(struct splay_tree *tree);
sint64 avl_tree_nice(struct avl_tree *tree);
sint64 binary_indexed_tree_range_sum(struct binary_indexed_tree *tree, uint32 nmbr_s, uint32 nmbr_e);
sint64 binary_indexed_tree_sum(struct binary_indexed_tree *tree, uint32 number);
sint64 binary_indexed_tree_value(struct binary_indexed_tree *tree, uint32 number);
sint64 binary_search_tree_nice(struct binary_search_tree *tree);
sint64 splay_tree_nice(struct splay_tree *tree);
static inline bool avl_tree_balanced_p_internal(struct avl_tree *tree);
static inline bool avl_tree_contains_p_internal(struct avl_tree *tree, struct avl_tree *node);
static inline bool avl_tree_doubly_child_p(struct avl_tree *tree);
static inline bool avl_tree_node_balanced_p(struct avl_tree *node);
static inline bool avl_tree_structure_legal_p(struct avl_tree *tree);
static inline bool binary_indexed_tree_number_legal_p(struct binary_indexed_tree *tree, uint32 number);
static inline bool binary_indexed_tree_structure_legal_p(struct binary_indexed_tree *tree);
static inline bool binary_search_tree_contains_p_internal(struct binary_search_tree *tree, struct binary_search_tree *node);
static inline bool binary_search_tree_doubly_child_p(struct binary_search_tree *node);
static inline bool binary_search_tree_structure_legal_p(struct binary_search_tree *tree);
static inline bool splay_tree_contains_p_internal(struct splay_tree *tree, struct splay_tree *node);
static inline bool splay_tree_doubly_child_p(struct splay_tree *node);
static inline bool splay_tree_structure_legal_p(struct splay_tree *tree);
static inline sint32 attr_always_inline avl_tree_height_balanced_opt_p(struct avl_tree *tree);
static inline sint32 attr_always_inline avl_tree_height_opt(struct avl_tree *tree);
static inline sint32 attr_always_inline avl_tree_height_opt(struct avl_tree *tree);
static inline sint32 binary_search_tree_height_internal(struct binary_search_tree *tree);
static inline sint32 splay_tree_height_internal(struct splay_tree *tree);
static inline sint64 binary_indexed_tree_sum_internal(struct binary_indexed_tree *tree, uint32 number);
static inline struct avl_tree * avl_tree_doubly_rotate_left(struct avl_tree *node);
static inline struct avl_tree * avl_tree_doubly_rotate_right(struct avl_tree *node);
static inline struct avl_tree * avl_tree_find_internal(struct avl_tree *tree, sint64 nice);
static inline struct avl_tree * avl_tree_find_max_internal(struct avl_tree *tree);
static inline struct avl_tree * avl_tree_find_min_internal(struct avl_tree *tree);
static inline struct avl_tree * avl_tree_insert_internal(struct avl_tree **tree, struct avl_tree *node);
static inline struct avl_tree * avl_tree_remove_internal(struct avl_tree **tree, struct avl_tree *node);
static inline struct avl_tree * avl_tree_single_rotate_left(struct avl_tree *node);
static inline struct avl_tree * avl_tree_single_rotate_right(struct avl_tree *node);
static inline struct avl_tree ** avl_tree_find_ptr_to_max(struct avl_tree **tree);
static inline struct avl_tree ** avl_tree_find_ptr_to_min(struct avl_tree **tree);
static inline struct binary_search_tree * binary_search_tree_find_internal(struct binary_search_tree *tree, sint64 nice);
static inline struct binary_search_tree * binary_search_tree_find_max_internal(struct binary_search_tree *tree);
static inline struct binary_search_tree * binary_search_tree_find_min_internal(struct binary_search_tree *tree);
static inline struct binary_search_tree * binary_search_tree_insert_internal(struct binary_search_tree **tree, struct binary_search_tree *node);
static inline struct binary_search_tree * binary_search_tree_remove_internal(struct binary_search_tree **tree, struct binary_search_tree *node);
static inline struct binary_search_tree ** binary_search_tree_find_ptr_to_max(struct binary_search_tree **tree);
static inline struct binary_search_tree ** binary_search_tree_find_ptr_to_min(struct binary_search_tree **tree);
static inline struct splay_tree * splay_tree_find_internal(struct splay_tree **tree, sint64 nice, struct splay_tree *root);
static inline struct splay_tree * splay_tree_find_max_internal(struct splay_tree **tree, struct splay_tree *root);
static inline struct splay_tree * splay_tree_find_min_internal(struct splay_tree **tree, struct splay_tree *root);
static inline struct splay_tree * splay_tree_insert_internal(struct splay_tree **tree, struct splay_tree *node, struct splay_tree *root);
static inline struct splay_tree * splay_tree_remove_internal(struct splay_tree **tree, struct splay_tree *node);
static inline struct splay_tree ** splay_tree_find_ptr_to_min(struct splay_tree **tree);
static inline void avl_tree_destroy_internal(struct avl_tree *tree);
static inline void avl_tree_doubly_child_strip(struct avl_tree **node_pre);
static inline void avl_tree_doubly_child_strip_from_max(struct avl_tree **node_pre);
static inline void avl_tree_doubly_child_strip_from_min(struct avl_tree **node_pre);
static inline void avl_tree_height_update(struct avl_tree *tree);
static inline void avl_tree_initial_internal(struct avl_tree *tree, sint64 nice);
static inline void avl_tree_iterate_internal(struct avl_tree *tree, void (*handle)(void *), enum ITER_ORDER order);
static inline void avl_tree_lt_doubly_child_strip(struct avl_tree **pre, struct avl_tree *node);
static inline void avl_tree_node_destroy(struct avl_tree *node);
static inline void avl_tree_rotate_left(struct avl_tree **tree);
static inline void avl_tree_rotate_right(struct avl_tree **tree);
static inline void avl_tree_swap_child(struct avl_tree *a, struct avl_tree *b);
static inline void binary_indexed_tree_add_internal(struct binary_indexed_tree *tree, uint32 number, sint64 val);
static inline void binary_search_tree_child_strip_from_max(struct binary_search_tree **node_pre);
static inline void binary_search_tree_child_strip_from_min(struct binary_search_tree **node_pre);
static inline void binary_search_tree_destroy_internal(struct binary_search_tree **tree);
static inline void binary_search_tree_doubly_child_strip(struct binary_search_tree **node_pre);
static inline void binary_search_tree_initial_internal(struct binary_search_tree *tree, sint64 nice);
static inline void binary_search_tree_iterate_internal(struct binary_search_tree *tree, void (*handle)(void *), enum ITER_ORDER order);
static inline void binary_search_tree_lt_doubly_child_strip(struct binary_search_tree **pre, struct binary_search_tree *node);
static inline void binary_search_tree_node_destroy(struct binary_search_tree *node);
static inline void binary_search_tree_swap_child(struct binary_search_tree *a, struct binary_search_tree *b);
static inline void splay_tree_balance_splaying_left(struct splay_tree **tree, struct splay_tree *root, struct splay_tree *target);
static inline void splay_tree_balance_splaying_right(struct splay_tree **tree, struct splay_tree *root, struct splay_tree *target);
static inline void splay_tree_destroy_internal(struct splay_tree *tree);
static inline void splay_tree_doubly_child_strip(struct splay_tree **pre);
static inline void splay_tree_initial_internal(struct splay_tree *tree, sint64 nice);
static inline void splay_tree_iterate_internal(struct splay_tree *tree, void (*handle)(void *), enum ITER_ORDER order);
static inline void splay_tree_lt_doubly_child_strip(struct splay_tree **pre, struct splay_tree *node);
static inline void splay_tree_node_destroy(struct splay_tree *node);
static inline void splay_tree_swap_child(struct splay_tree *a, struct splay_tree *b);
static void inline splay_tree_balance_doubly_splaying_left(struct splay_tree **tree);
static void inline splay_tree_balance_doubly_splaying_right(struct splay_tree **tree);
static void inline splay_tree_balance_root_splaying_left(struct splay_tree **tree);
static void inline splay_tree_balance_root_splaying_right(struct splay_tree **tree);
static void inline splay_tree_balance_single_splaying_left(struct splay_tree **tree);
static void inline splay_tree_balance_single_splaying_right(struct splay_tree **tree);
struct avl_tree * avl_tree_create(void);
struct avl_tree * avl_tree_find(struct avl_tree *tree, sint64 nice);
struct avl_tree * avl_tree_find_max(struct avl_tree *tree);
struct avl_tree * avl_tree_find_min(struct avl_tree *tree);
struct avl_tree * avl_tree_insert(struct avl_tree **tree, struct avl_tree *node);
struct avl_tree * avl_tree_left(struct avl_tree *tree);
struct avl_tree * avl_tree_remove(struct avl_tree **tree, struct avl_tree *node);
struct avl_tree * avl_tree_right(struct avl_tree *tree);
struct binary_indexed_tree * binary_indexed_tree_create(sint64 *data, uint32 size);
struct binary_search_tree  * binary_search_tree_find_min(struct binary_search_tree *tree);
struct binary_search_tree * binary_search_tree_create(void);
struct binary_search_tree * binary_search_tree_find(struct binary_search_tree *tree, sint64 nice);
struct binary_search_tree * binary_search_tree_find_max(struct binary_search_tree *tree);
struct binary_search_tree * binary_search_tree_insert(struct binary_search_tree **tree, struct binary_search_tree *node);
struct binary_search_tree * binary_search_tree_left(struct binary_search_tree *tree);
struct binary_search_tree * binary_search_tree_remove(struct binary_search_tree **tree, struct binary_search_tree *node);
struct binary_search_tree * binary_search_tree_right(struct binary_search_tree *tree);
struct splay_tree * splay_tree_create(void);
struct splay_tree * splay_tree_find(struct splay_tree **tree, sint64 nice);
struct splay_tree * splay_tree_find_max(struct splay_tree **tree);
struct splay_tree * splay_tree_find_min(struct splay_tree **tree);
struct splay_tree * splay_tree_insert(struct splay_tree **tree, struct splay_tree *node);
struct splay_tree * splay_tree_left(struct splay_tree *tree);
struct splay_tree * splay_tree_remove(struct splay_tree **tree, struct splay_tree *node);
struct splay_tree * splay_tree_right(struct splay_tree *tree);
uint32 binary_indexed_tree_size(struct binary_indexed_tree *tree);
void avl_tree_destroy(struct avl_tree **tree);
void avl_tree_height_set(struct avl_tree *tree, sint32 height);
void avl_tree_initial(struct avl_tree *tree, sint64 nice);
void avl_tree_iterate(struct avl_tree *tree, void (*handle)(void *), enum ITER_ORDER order);
void avl_tree_nice_set(struct avl_tree *tree, sint64 nice);
void binary_indexed_tree_add(struct binary_indexed_tree *tree, uint32 number, sint64 val);
void binary_indexed_tree_destroy(struct binary_indexed_tree **tree);
void binary_indexed_tree_sub(struct binary_indexed_tree *tree, uint32 number, sint64 val);
void binary_search_tree_destroy(struct binary_search_tree **tree);
void binary_search_tree_initial(struct binary_search_tree *tree, sint64 nice);
void binary_search_tree_iterate(struct binary_search_tree *tree, void (*handle)(void *), enum ITER_ORDER order);
void binary_search_tree_left_set(struct binary_search_tree *tree, struct binary_search_tree *left);
void binary_search_tree_node_nice_set(struct binary_search_tree *tree, sint64 nice);
void binary_search_tree_right_set(struct binary_search_tree *tree, struct binary_search_tree *right);
void splay_tree_destroy(struct splay_tree **tree);
void splay_tree_initial(struct splay_tree *tree, sint64 nice);
void splay_tree_iterate(struct splay_tree *tree, void (*handle)(void *), enum ITER_ORDER order);
void splay_tree_nice_set(struct splay_tree *tree, sint64 nice);

#endif

