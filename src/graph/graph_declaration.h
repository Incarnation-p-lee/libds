#ifndef HAVE_DEFINED_graph_H
#define HAVE_DEFINED_graph_H

// Automaticaly generated by script/produce_module_declaration_h.pl.

#if defined DEBUG

static inline bool graph_adjacent_illegal_p(s_adjacent_t *adjacent);
static inline bool graph_adjacent_legal_p(s_adjacent_t *adjacent);
static inline bool graph_edge_array_illegal_p(s_edge_array_t *edge_array);
static inline bool graph_edge_array_legal_p(s_edge_array_t *edge_array);
static inline bool graph_edge_illegal_p(s_edge_t *edge);
static inline bool graph_edge_legal_p(s_edge_t *edge);
static inline bool graph_illegal_p(s_graph_t *graph);
static inline bool graph_legal_p(s_graph_t *graph);
static inline bool graph_topo_list_illegal_p(s_topo_list_t *topo_list);
static inline bool graph_topo_list_legal_p(s_topo_list_t *topo_list);
static inline bool graph_vertex_array_illegal_p(s_vertex_array_t *vertex_array);
static inline bool graph_vertex_array_legal_p(s_vertex_array_t *vertex_array);
static inline bool graph_vertex_illegal_p(s_vertex_t *vertex);
static inline bool graph_vertex_legal_p(s_vertex_t *vertex);
static inline void graph_dijkstra_table_print_i(s_dijkstra_table_t *dj_table);
static inline void graph_print_i(s_graph_t *graph);
static inline void graph_vertex_print(s_vertex_t *vertex);
void graph_dijkstra_table_print(s_dijkstra_table_t *dj_table);
void graph_print(s_graph_t *graph);

#endif

bool directed_graph_dijkstra_table_illegal_p(s_dijkstra_table_t *dj_table);
bool directed_graph_dijkstra_table_legal_p(s_dijkstra_table_t *dj_table);
bool directed_graph_illegal_p(s_graph_t *graph);
bool directed_graph_legal_p(s_graph_t *graph);
bool directed_graph_paths_illegal_p(s_graph_paths_t *paths);
bool directed_graph_paths_legal_p(s_graph_paths_t *paths);
bool directed_graph_vertex_successor_p(s_vertex_t *vertex, s_vertex_t *v_successor);
bool graph_dijkstra_entry_illegal_p(s_dijkstra_entry_t *dj_entry);
bool graph_dijkstra_entry_legal_p(s_dijkstra_entry_t *dj_entry);
bool graph_dijkstra_table_illegal_p(s_dijkstra_table_t *dj_table);
bool graph_dijkstra_table_legal_p(s_dijkstra_table_t *dj_table);
bool indirected_graph_illegal_p(s_graph_t *graph);
bool indirected_graph_legal_p(s_graph_t *graph);
s_adjacent_t * directed_graph_vertex_successor(s_vertex_t *vertex);
s_array_queue_t * directed_graph_paths_queue(s_graph_paths_t *paths);
s_dijkstra_entry_t * directed_graph_dijkstra_table_entry(s_dijkstra_table_t *dj_table, uint32 i);
s_dijkstra_table_t * directed_graph_dijkstra(s_graph_t *graph, s_vertex_t *vertex);
s_edge_array_t * directed_graph_edge_array(s_graph_t *graph);
s_edge_array_t * indirected_graph_edge_array(s_graph_t *graph);
s_edge_t * directed_graph_edge_array_edge(s_edge_array_t *edge_array, uint32 i);
s_edge_t * directed_graph_edge_remove(s_graph_t *graph, s_edge_t *edge);
s_edge_t * directed_graph_link(s_graph_t *graph, void *value_from, void *value_to, sint32 cost);
s_edge_t * indirected_graph_edge_array_edge(s_edge_array_t *edge_array, uint32 i);
s_edge_t * indirected_graph_edge_remove(s_graph_t *graph, s_edge_t *edge);
s_edge_t * indirected_graph_link(s_graph_t *graph, void *value_a, void *value_b, sint32 cost);
s_graph_paths_t * directed_graph_paths_find(s_graph_t *graph, s_vertex_t *vertex_from, s_vertex_t *vertex_to);
s_graph_t * directed_graph_create(void);
s_graph_t * indirected_graph_create(void);
s_topo_list_t * directed_graph_topo_list_next(s_topo_list_t *topo_list);
s_topo_list_t * directed_graph_topo_sort(s_graph_t *graph);
s_vertex_array_t * directed_graph_vertex_array(s_graph_t *graph);
s_vertex_array_t * indirected_graph_vertex_array(s_graph_t *graph);
s_vertex_t * directed_graph_dijkstra_entry_vertex(s_dijkstra_entry_t *dj_entry);
s_vertex_t * directed_graph_topo_list_to_vertex(s_topo_list_t *topo_list);
s_vertex_t * directed_graph_vertex_array_vertex(s_vertex_array_t *vertex_array, uint32 i);
s_vertex_t * directed_graph_vertex_remove(s_graph_t *graph, s_vertex_t *vertex);
s_vertex_t * indirected_graph_vertex_array_vertex(s_vertex_array_t *vertex_array, uint32 i);
s_vertex_t * indirected_graph_vertex_remove(s_graph_t *graph, s_vertex_t *vertex);
sint32 directed_graph_edge_cost(s_edge_t *edge);
sint32 indirected_graph_edge_cost(s_edge_t *edge);
static inline bool directed_graph_paths_illegal_ip(s_graph_paths_t *paths);
static inline bool directed_graph_paths_legal_ip(s_graph_paths_t *paths);
static inline bool directed_graph_vertex_successor_ip(s_vertex_t *vertex, s_vertex_t *v_successor);
static inline bool graph_adjacent_full_p(s_adjacent_t *adjacent);
static inline bool graph_adjacent_sparse_p(s_adjacent_t *adjacent);
static inline bool graph_attribute_directed_p(s_graph_t *graph);
static inline bool graph_attribute_indirected_p(s_graph_t *graph);
static inline bool graph_dijkstra_entry_illegal_ip(s_dijkstra_entry_t *dj_entry);
static inline bool graph_dijkstra_entry_is_known_p(s_dijkstra_entry_t *dj_entry);
static inline bool graph_dijkstra_entry_legal_ip(s_dijkstra_entry_t *dj_entry);
static inline bool graph_dijkstra_table_illegal_ip(s_dijkstra_table_t *dj_table);
static inline bool graph_dijkstra_table_legal_ip(s_dijkstra_table_t *dj_table);
static inline bool graph_edge_array_full_p(s_edge_array_t *edge_array);
static inline bool graph_edge_compatible_p(s_graph_t *graph, s_edge_t *edge);
static inline bool graph_edge_incompatible_p(s_graph_t *graph, s_edge_t *edge);
static inline bool graph_paths_illegal_ip(s_graph_paths_t *paths);
static inline bool graph_paths_legal_ip(s_graph_paths_t *paths);
static inline bool graph_topo_list_no_indegree_p(s_topo_list_t *topo_list);
static inline bool graph_vertex_array_full_p(s_vertex_array_t *vertex_array);
static inline bool graph_vertex_compatible_p(s_graph_t *graph, s_vertex_t *vertex);
static inline bool graph_vertex_incompatible_p(s_graph_t *graph, s_vertex_t *vertex);
static inline bool graph_vertex_value_exist_p(s_graph_t *graph, void *value);
static inline bool indirected_graph_edge_vertex_contains_p(s_edge_t *edge, s_vertex_t *vertex);
static inline s_adjacent_t * graph_adjacent_create(void);
static inline s_adjacent_t * graph_vertex_adjacent(s_vertex_t *vertex);
static inline s_adjacent_t * graph_vertex_precursor(s_vertex_t *vertex);
static inline s_adjacent_t * graph_vertex_successor(s_vertex_t *vertex);
static inline s_array_queue_t * graph_edge_array_queue(s_edge_array_t *edge_array);
static inline s_array_queue_t * graph_paths_queue(s_graph_paths_t *paths);
static inline s_array_queue_t * graph_vertex_array_queue(s_vertex_array_t *vertex_array);
static inline s_dijkstra_entry_t * graph_dijkstra_table_array(s_dijkstra_table_t *dj_table);
static inline s_dijkstra_entry_t * graph_dijkstra_table_entry(s_dijkstra_table_t *dj_table, uint32 i);
static inline s_dijkstra_entry_t * graph_vertex_to_dijkstra_entry(s_vertex_t *vertex, s_dijkstra_table_t *dj_table);
static inline s_dijkstra_table_t * directed_graph_dijkstra_i(s_graph_t *graph, s_vertex_t *vertex);
static inline s_dijkstra_table_t * directed_graph_dijkstra_table_create(s_graph_t *graph);
static inline s_edge_array_t * graph_edge_array(s_graph_t *graph);
static inline s_edge_array_t * graph_edge_array_create(void);
static inline s_edge_t * directed_graph_edge_create(s_graph_t *graph, s_vertex_t *vertex_from, s_vertex_t *vertex_to, sint32 cost);
static inline s_edge_t * directed_graph_edge_remove_i(s_graph_t *graph, s_edge_t *edge);
static inline s_edge_t * directed_graph_link_i(s_graph_t *graph, void *value_from, void *value_to, sint32 cost);
static inline s_edge_t * graph_adjacent_edge(s_adjacent_t *adjacent, uint32 i);
static inline s_edge_t * graph_edge_array_edge(s_edge_array_t *edge_array, uint32 i);
static inline s_edge_t * graph_edge_create(sint32 cost);
static inline s_edge_t * indirected_graph_edge_create(s_graph_t *graph, s_vertex_t *vertex_a, s_vertex_t *vertex_b, sint32 cost);
static inline s_edge_t * indirected_graph_edge_remove_i(s_graph_t *graph, s_edge_t *edge);
static inline s_edge_t * indirected_graph_link_i(s_graph_t *graph, void *value_a, void *value_b, sint32 cost);
static inline s_graph_paths_t * directed_graph_paths_find_i(s_graph_t *graph, s_vertex_t *vertex_from, s_vertex_t *vertex_to);
static inline s_graph_paths_t * graph_paths_create(s_vertex_t *vertex_from, s_vertex_t *vertex_to);
static inline s_graph_t * graph_create(void);
static inline s_open_addressing_hash_t * graph_vertex_hash(s_graph_t *graph);
static inline s_topo_list_t * directed_graph_topo_sort_i(s_graph_t *graph);
static inline s_topo_list_t * directed_graph_topo_sort_process(s_array_queue_t *queue, uint32 vertex_count);
static inline s_topo_list_t * graph_topo_list_next(s_topo_list_t *node);
static inline s_topo_list_t * graph_vertex_topo_list(s_vertex_t *vertex);
static inline s_vertex_array_t * graph_vertex_array(s_graph_t *graph);
static inline s_vertex_array_t * graph_vertex_array_create(void);
static inline s_vertex_t * directed_graph_topo_list_to_vertex_i(s_topo_list_t *topo_list);
static inline s_vertex_t * directed_graph_vertex_create(s_graph_t *graph, void *value);
static inline s_vertex_t * directed_graph_vertex_obtain(s_graph_t *graph, void *value);
static inline s_vertex_t * directed_graph_vertex_remove_i(s_graph_t *graph, s_vertex_t *vertex);
static inline s_vertex_t * graph_dijkstra_entry_vertex(s_dijkstra_entry_t *dj_entry);
static inline s_vertex_t * graph_dijkstra_entry_vertex_pre(s_dijkstra_entry_t *dj_entry);
static inline s_vertex_t * graph_edge_precursor(s_edge_t *edge);
static inline s_vertex_t * graph_edge_successor(s_edge_t *edge);
static inline s_vertex_t * graph_edge_vertex_0(s_edge_t *edge);
static inline s_vertex_t * graph_edge_vertex_1(s_edge_t *edge);
static inline s_vertex_t * graph_paths_vertex_from(s_graph_paths_t *paths);
static inline s_vertex_t * graph_paths_vertex_to(s_graph_paths_t *paths);
static inline s_vertex_t * graph_vertex_array_find(s_vertex_array_t *vertex_array, void *value);
static inline s_vertex_t * graph_vertex_array_vertex(s_vertex_array_t *vertex_array, uint32 i);
static inline s_vertex_t * graph_vertex_create(s_graph_t *graph, void *value);
static inline s_vertex_t * indirected_graph_edge_linked_vertex(s_edge_t *edge, s_vertex_t *vertex);
static inline s_vertex_t * indirected_graph_vertex_create(s_graph_t *graph, void *value);
static inline s_vertex_t * indirected_graph_vertex_obtain(s_graph_t *graph, void *value);
static inline s_vertex_t * indirected_graph_vertex_remove_i(s_graph_t *graph, s_vertex_t *vertex);
static inline sint32 graph_attibute_label_obtain(s_graph_t *graph);
static inline sint32 graph_edge_cost(s_edge_t *edge);
static inline uint32 directed_graph_path_length_i(s_array_queue_t *path);
static inline uint32 graph_adjacent_count(s_adjacent_t *adjacent);
static inline uint32 graph_adjacent_limit(s_adjacent_t *adjacent);
static inline uint32 graph_adjacent_load_factor(s_adjacent_t *adj);
static inline uint32 graph_adjacent_rest(s_adjacent_t *adjacent);
static inline uint32 graph_adjacent_rest_factor(s_adjacent_t *adj);
static inline uint32 graph_adjacent_size(s_adjacent_t *adjacent);
static inline uint32 graph_dijkstra_entry_distance(s_dijkstra_entry_t *dj_entry);
static inline uint32 graph_dijkstra_table_limit(s_dijkstra_table_t *dj_table);
static inline uint32 graph_dijkstra_table_size(s_dijkstra_table_t *dj_table);
static inline uint32 graph_edge_array_count(s_edge_array_t *edge_array);
static inline uint32 graph_edge_array_limit(s_edge_array_t *edge_array);
static inline uint32 graph_edge_array_size(s_edge_array_t *edge_array);
static inline uint32 graph_edge_index(s_edge_t *edge);
static inline uint32 graph_topo_list_indegree(s_topo_list_t *topo_list);
static inline uint32 graph_vertex_array_count(s_vertex_array_t *vertex_array);
static inline uint32 graph_vertex_array_limit(s_vertex_array_t *vertex_array);
static inline uint32 graph_vertex_array_size(s_vertex_array_t *vertex_array);
static inline uint32 graph_vertex_count(s_graph_t *graph);
static inline uint32 graph_vertex_index(s_vertex_t *vertex);
static inline uint32 graph_vertex_label(s_vertex_t *vertex);
static inline void * graph_edge_precursor_value(s_edge_t *edge);
static inline void * graph_edge_successor_value(s_edge_t *edge);
static inline void * graph_edge_vertex_0_value(s_edge_t *edge);
static inline void * graph_edge_vertex_1_value(s_edge_t *edge);
static inline void * graph_vertex_data(s_vertex_t *vertex);
static inline void * graph_vertex_value(s_vertex_t *vertex);
static inline void directed_graph_dijkstra_entry_update(s_dijkstra_entry_t *entry, s_dijkstra_entry_t *entry_prev, s_vertex_t *v_prev, s_edge_t *edge, s_minimal_heap_t *heap);
static inline void directed_graph_dijkstra_initial(s_graph_t *graph, s_vertex_t *vertex, s_minimal_heap_t *heap, s_dijkstra_table_t *dj_table);
static inline void directed_graph_dijkstra_table_destroy_i(s_dijkstra_table_t *dj_table);
static inline void directed_graph_edge_link(s_edge_t *edge, s_vertex_t *vertex_from, s_vertex_t *vertex_to);
static inline void directed_graph_path_append(s_graph_paths_t *paths, s_array_stack_t *stack);
static inline void directed_graph_paths_find_dfs(s_vertex_t *vertex_to, s_array_stack_t *stack, s_open_addressing_hash_t *hash, s_graph_paths_t *paths);
static inline void directed_graph_paths_stack_pop(s_array_stack_t *stack, s_open_addressing_hash_t *hash);
static inline void directed_graph_paths_stack_push(s_array_stack_t *stack, s_vertex_t *vertex, s_open_addressing_hash_t *hash);
static inline void directed_graph_topo_sort_initial(s_graph_t *graph, s_array_queue_t *queue);
static inline void directed_graph_topo_sort_successor_process(s_array_queue_t *queue, s_vertex_t *vertex);
static inline void directed_graph_vertex_cleanup(s_vertex_t *vertex, s_edge_array_t *edge_array);
static inline void graph_adjacent_cleanup(s_adjacent_t *adjacent);
static inline void graph_adjacent_compress(s_adjacent_t *adjacent);
static inline void graph_adjacent_destroy(s_adjacent_t *adjacent);
static inline void graph_adjacent_edge_append(s_adjacent_t *adjacent, s_edge_t *edge);
static inline void graph_adjacent_edge_count_dec(s_adjacent_t *adjacent);
static inline void graph_adjacent_edge_remove(s_adjacent_t *adjacent, s_edge_t *edge);
static inline void graph_adjacent_edge_set(s_adjacent_t *adjacent, uint32 i, s_edge_t *edge);
static inline void graph_adjacent_index_set(s_adjacent_t *adjacent, uint32 index);
static inline void graph_adjacent_size_set(s_adjacent_t *adjacent, uint32 size);
static inline void graph_attribute_directed_set(s_graph_t *graph, bool is_directed);
static inline void graph_destroy(s_graph_t *graph);
static inline void graph_dijkstra_entry_distance_set(s_dijkstra_entry_t *dj_entry, uint32 distance);
static inline void graph_dijkstra_entry_is_known_set(s_dijkstra_entry_t *dj_entry, bool is_known);
static inline void graph_dijkstra_entry_vertex_pre_set(s_dijkstra_entry_t *dj_entry, s_vertex_t *vertex_pre);
static inline void graph_dijkstra_entry_vertex_set(s_dijkstra_entry_t *dj_entry, s_vertex_t *v);
static inline void graph_edge_array_add(s_edge_array_t *edge_array, s_edge_t *edge);
static inline void graph_edge_array_dec(s_edge_array_t *edge_array);
static inline void graph_edge_array_destroy(s_edge_array_t *edge_array);
static inline void graph_edge_array_edge_destroy(s_edge_array_t *edge_array, s_edge_t *edge);
static inline void graph_edge_array_inc(s_edge_array_t *edge_array);
static inline void graph_edge_array_queue_enter(s_edge_array_t *edge_array, void *val);
static inline void graph_edge_array_remove(s_edge_array_t *edge_array, uint32 i);
static inline void graph_edge_array_size_set(s_edge_array_t *edge_array, uint32 size);
static inline void graph_edge_array_visited_cleanup(s_graph_t *graph);
static inline void graph_edge_cleanup(s_edge_t *edge);
static inline void graph_edge_cost_set(s_edge_t *edge, sint32 cost);
static inline void graph_edge_destroy(s_edge_t *edge);
static inline void graph_edge_index_set(s_edge_t *edge, uint32 index);
static inline void graph_edge_is_visited_set(s_edge_t *edge, bool is_visited);
static inline void graph_paths_destroy(s_graph_paths_t *graph_paths);
static inline void graph_topo_list_indegree_dec(s_topo_list_t *topo_list);
static inline void graph_topo_list_indegree_set(s_topo_list_t *topo_list, uint32 indegree);
static inline void graph_topo_list_initial(s_topo_list_t *topo_list, uint32 indegree);
static inline void graph_topo_list_insert_before(s_topo_list_t *node, s_topo_list_t *inserted);
static inline void graph_topo_list_remove(s_topo_list_t *node);
static inline void graph_vertex_array_add(s_vertex_array_t *v_array, s_vertex_t *vertex);
static inline void graph_vertex_array_dec(s_vertex_array_t *vertex_array);
static inline void graph_vertex_array_destroy(s_vertex_array_t *vertex_array);
static inline void graph_vertex_array_inc(s_vertex_array_t *vertex_array);
static inline void graph_vertex_array_queue_enter(s_vertex_array_t *vertex_array, void *val);
static inline void graph_vertex_array_remove(s_vertex_array_t *vertex_array, uint32 i);
static inline void graph_vertex_array_size_set(s_vertex_array_t *vertex_array, uint32 size);
static inline void graph_vertex_array_visited_cleanup(s_graph_t *graph);
static inline void graph_vertex_cleanup(s_vertex_t *vertex);
static inline void graph_vertex_destroy(s_vertex_t *vertex);
static inline void graph_vertex_index_set(s_vertex_t *vertex, uint32 index);
static inline void graph_vertex_is_visited_set(s_vertex_t *vertex, bool is_visited);
static inline void indirected_graph_edge_link(s_edge_t *edge, s_vertex_t *vertex_a, s_vertex_t *vertex_b);
static inline void indirected_graph_vertex_edge_disconnet(s_vertex_t *vertex, s_edge_t *edge);
uint32 directed_graph_adjacent_limit(s_adjacent_t *adjacent);
uint32 directed_graph_dijkstra_entry_distance(s_dijkstra_entry_t *dj_entry);
uint32 directed_graph_dijkstra_table_limit(s_dijkstra_table_t *dj_table);
uint32 directed_graph_edge_array_limit(s_edge_array_t *edge_array);
uint32 directed_graph_edge_count(s_graph_t *graph);
uint32 directed_graph_path_length(s_array_queue_t *path);
uint32 directed_graph_vertex_array_limit(s_vertex_array_t *vertex_array);
uint32 directed_graph_vertex_count(s_graph_t *graph);
uint32 indirected_graph_edge_array_limit(s_edge_array_t *edge_array);
uint32 indirected_graph_edge_count(s_graph_t *graph);
uint32 indirected_graph_vertex_array_limit(s_vertex_array_t *vertex_array);
uint32 indirected_graph_vertex_count(s_graph_t *graph);
void * directed_graph_edge_precursor_value(s_edge_t *edge);
void * directed_graph_edge_successor_value(s_edge_t *edge);
void * directed_graph_vertex_value(s_vertex_t *vertex);
void * indirected_graph_edge_vertex_0_value(s_edge_t *edge);
void * indirected_graph_edge_vertex_1_value(s_edge_t *edge);
void directed_graph_destroy(s_graph_t **graph);
void directed_graph_dijkstra_table_destroy(s_dijkstra_table_t **dj_table);
void directed_graph_edge_cost_set(s_edge_t *edge, sint32 cost);
void directed_graph_edge_destroy(s_edge_t **edge);
void directed_graph_paths_destroy(s_graph_paths_t **paths);
void directed_graph_vertex_destroy(s_vertex_t **vertex);
void indirected_graph_destroy(s_graph_t **graph);
void indirected_graph_edge_destroy(s_edge_t **edge);
void indirected_graph_vertex_destroy(s_vertex_t **vertex);

#endif

