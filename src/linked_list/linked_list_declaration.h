#ifndef HAVE_DEFINED_linked_list_H
#define HAVE_DEFINED_linked_list_H

// Automaticaly generated by script/produce_module_declaration_h.pl.

bool doubly_linked_list_contains_p(struct doubly_linked_list *list, struct doubly_linked_list *node);
bool doubly_linked_list_structure_legal_p(struct doubly_linked_list *list);
bool single_linked_list_contains_p(struct single_linked_list *list, struct single_linked_list *node);
bool single_linked_list_structure_legal_p(struct single_linked_list *list);
bool skip_linked_list_key_contains_p(struct skip_linked_list *list, sint32 key);
bool skip_linked_list_structure_legal_p(struct skip_linked_list *list);
sint32 skip_linked_list_key(struct skip_linked_list *list);
static inline bool doubly_linked_list_contains_ip(struct doubly_linked_list *list, struct doubly_linked_list *node);
static inline bool doubly_linked_list_structure_legal_ip(struct doubly_linked_list *list);
static inline bool single_linked_list_contains_ip(struct single_linked_list *list, struct single_linked_list *node);
static inline bool single_linked_list_structure_legal_ip(struct single_linked_list *list);
static inline bool skip_linked_list_exist_on_level(struct skip_linked_list *list, struct skip_linked_list *node, uint32 level);
static inline bool skip_linked_list_key_contains_ip(struct skip_linked_list *list, sint32 key);
static inline bool skip_linked_list_ordering_p(struct skip_linked_list *list);
static inline bool skip_linked_list_structure_legal_ip(struct skip_linked_list *list);
static inline struct doubly_linked_list * doubly_linked_list_create_i();
static inline struct doubly_linked_list * doubly_linked_list_remove_i(struct doubly_linked_list **list);
static inline struct single_linked_list * single_linked_list_create_i(void);
static inline struct single_linked_list * single_linked_list_previous_i(struct single_linked_list *list);
static inline struct single_linked_list * single_linked_list_remove_i(struct single_linked_list **list);
static inline struct skip_linked_list * skip_linked_list_find_key_i(struct skip_linked_list *list, sint32 key, uint32 lv);
static inline struct skip_linked_list * skip_linked_list_insert_before_head(struct skip_linked_list *list, struct skip_linked_list *tgt);
static inline struct skip_linked_list * skip_linked_list_insert_i(struct skip_linked_list **list, struct skip_linked_list *tgt);
static inline struct skip_linked_list * skip_linked_list_remove_i(struct skip_linked_list **list, struct skip_linked_list *tgt);
static inline struct skip_linked_list * skip_linked_list_remove_with_previous_list(struct skip_linked_list *tgt, struct skip_linked_list **pre_list, uint32 lv);
static inline uint32 doubly_linked_list_length_i(struct doubly_linked_list *list);
static inline uint32 single_linked_list_length_i(struct single_linked_list *list);
static inline uint32 skip_linked_list_length_i(struct skip_linked_list *list);
static inline void doubly_linked_list_initial_i(struct doubly_linked_list *list);
static inline void doubly_linked_list_insert_after_i(struct doubly_linked_list *list, struct doubly_linked_list *node);
static inline void doubly_linked_list_insert_before_i(struct doubly_linked_list *list, struct doubly_linked_list *node);
static inline void single_linked_list_initial_i(struct single_linked_list *list);
static inline void single_linked_list_insert_after_i(struct single_linked_list *list, struct single_linked_list *node);
static inline void single_linked_list_insert_before_i(struct single_linked_list *list, struct single_linked_list *node);
static inline void skip_linked_list_initial_i(struct skip_linked_list *list, sint32 key);
static inline void skip_linked_list_insert_update_with_lv(struct skip_linked_list *tgt, struct skip_linked_list **prev_list, uint32 lv);
static inline void skip_linked_list_node_clean(struct skip_linked_list *list);
static inline void skip_linked_list_remove_head(struct skip_linked_list *list);
static inline void skip_linked_list_remove_on_level(struct skip_linked_list *list, struct skip_linked_list *removed, uint32 level);
struct doubly_linked_list * doubly_linked_list_create(void);
struct doubly_linked_list * doubly_linked_list_merge(struct doubly_linked_list *m, struct doubly_linked_list *n);
struct doubly_linked_list * doubly_linked_list_next(struct doubly_linked_list *list);
struct doubly_linked_list * doubly_linked_list_node_by_index(struct doubly_linked_list *list, uint32 index);
struct doubly_linked_list * doubly_linked_list_node_copy(struct doubly_linked_list *node);
struct doubly_linked_list * doubly_linked_list_previous(struct doubly_linked_list *list);
struct doubly_linked_list * doubly_linked_list_remove(struct doubly_linked_list **list);
struct single_linked_list * single_linked_list_create(void);
struct single_linked_list * single_linked_list_merge(struct single_linked_list *m, struct single_linked_list *n);
struct single_linked_list * single_linked_list_next(struct single_linked_list *list);
struct single_linked_list * single_linked_list_node_by_index(struct single_linked_list *list, uint32 index);
struct single_linked_list * single_linked_list_node_copy(struct single_linked_list *node);
struct single_linked_list * single_linked_list_previous(struct single_linked_list *list);
struct single_linked_list * single_linked_list_remove(struct single_linked_list **list);
struct skip_linked_list * skip_linked_list_create(void);
struct skip_linked_list * skip_linked_list_create_with_key(sint32 key);
struct skip_linked_list * skip_linked_list_find_key(struct skip_linked_list *list, sint32 key);
struct skip_linked_list * skip_linked_list_insert(struct skip_linked_list **list, struct skip_linked_list *tgt);
struct skip_linked_list * skip_linked_list_merge(struct skip_linked_list *m, struct skip_linked_list *n);
struct skip_linked_list * skip_linked_list_next(struct skip_linked_list *list);
struct skip_linked_list * skip_linked_list_node_by_index(struct skip_linked_list *list, uint32 index);
struct skip_linked_list * skip_linked_list_remove(struct skip_linked_list **list, struct skip_linked_list *tgt);
uint32 doubly_linked_list_length(struct doubly_linked_list *list);
uint32 single_linked_list_length(struct single_linked_list *list);
uint32 skip_linked_list_length(struct skip_linked_list *list);
void doubly_linked_list_destroy(struct doubly_linked_list **list);
void doubly_linked_list_initial(struct doubly_linked_list *list);
void doubly_linked_list_insert_after(struct doubly_linked_list *list, struct doubly_linked_list *node);
void doubly_linked_list_insert_before(struct doubly_linked_list *list, struct doubly_linked_list *node);
void doubly_linked_list_iterate(struct doubly_linked_list *list, void (*handler)(void *));
void doubly_linked_list_next_set(struct doubly_linked_list *list, struct doubly_linked_list *next);
void doubly_linked_list_previous_set(struct doubly_linked_list *list, struct doubly_linked_list *previous);
void single_linked_list_destroy(struct single_linked_list **list);
void single_linked_list_initial(struct single_linked_list *list);
void single_linked_list_insert_after(struct single_linked_list *list, struct single_linked_list *node);
void single_linked_list_insert_before(struct single_linked_list *list, struct single_linked_list *node);
void single_linked_list_iterate(struct single_linked_list *list, void (*handler)(void *));
void single_linked_list_next_set(struct single_linked_list *list, struct single_linked_list *next);
void skip_linked_list_destroy(struct skip_linked_list **list);
void skip_linked_list_initial(struct skip_linked_list *list);
void skip_linked_list_iterate(struct skip_linked_list *list, void (*handler)(void *));
void skip_linked_list_key_set(struct skip_linked_list *list, sint32 key);
void skip_linked_list_next_set(struct skip_linked_list *list, struct skip_linked_list *next);

#endif

