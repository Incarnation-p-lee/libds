#ifndef HAVE_DEFINED_linked_list_H
#define HAVE_DEFINED_linked_list_H

// Automaticaly generated by script/produce_module_declaration_h.pl.

bool doubly_linked_list_contains_p(s_doubly_linked_list_t *list, s_doubly_linked_list_t *node);
bool doubly_linked_list_structure_illegal_p(s_doubly_linked_list_t *list);
bool doubly_linked_list_structure_legal_p(s_doubly_linked_list_t *list);
bool single_linked_list_contains_p(s_single_linked_list_t *list, s_single_linked_list_t *node);
bool single_linked_list_structure_illegal_p(s_single_linked_list_t *list);
bool single_linked_list_structure_legal_p(s_single_linked_list_t *list);
bool skip_linked_list_contains_p(s_skip_linked_list_t *list, s_skip_linked_list_t *node);
bool skip_linked_list_structure_legal_p(s_skip_linked_list_t *list);
s_doubly_linked_list_t * doubly_linked_list_create(void);
s_doubly_linked_list_t * doubly_linked_list_merge(s_doubly_linked_list_t *m, s_doubly_linked_list_t *n);
s_doubly_linked_list_t * doubly_linked_list_next(s_doubly_linked_list_t *list);
s_doubly_linked_list_t * doubly_linked_list_node_by_index(s_doubly_linked_list_t *list, uint32 index);
s_doubly_linked_list_t * doubly_linked_list_node_copy(s_doubly_linked_list_t *node);
s_doubly_linked_list_t * doubly_linked_list_previous(s_doubly_linked_list_t *list);
s_doubly_linked_list_t * doubly_linked_list_remove(s_doubly_linked_list_t **list);
s_single_linked_list_t * single_linked_list_create(void);
s_single_linked_list_t * single_linked_list_merge(s_single_linked_list_t *m, s_single_linked_list_t *n);
s_single_linked_list_t * single_linked_list_next(s_single_linked_list_t *list);
s_single_linked_list_t * single_linked_list_node_by_index(s_single_linked_list_t *list, uint32 index);
s_single_linked_list_t * single_linked_list_node_copy(s_single_linked_list_t *node);
s_single_linked_list_t * single_linked_list_previous(s_single_linked_list_t *list);
s_single_linked_list_t * single_linked_list_remove(s_single_linked_list_t **list);
s_skip_linked_list_t * skip_linked_list_create(void);
s_skip_linked_list_t * skip_linked_list_create_with_key(sint32 key);
s_skip_linked_list_t * skip_linked_list_find_key(s_skip_linked_list_t *list, sint32 key);
s_skip_linked_list_t * skip_linked_list_insert(s_skip_linked_list_t **list, s_skip_linked_list_t *tgt);
s_skip_linked_list_t * skip_linked_list_merge(s_skip_linked_list_t *m, s_skip_linked_list_t *n);
s_skip_linked_list_t * skip_linked_list_next(s_skip_linked_list_t *list);
s_skip_linked_list_t * skip_linked_list_node_by_index(s_skip_linked_list_t *list, uint32 index);
s_skip_linked_list_t * skip_linked_list_remove(s_skip_linked_list_t **list, s_skip_linked_list_t *tgt);
sint32 skip_linked_list_key(s_skip_linked_list_t *list);
static inline bool doubly_linked_list_contains_ip(s_doubly_linked_list_t *list, s_doubly_linked_list_t *node);
static inline bool doubly_linked_list_structure_illegal_ip(s_doubly_linked_list_t *list);
static inline bool doubly_linked_list_structure_legal_ip(s_doubly_linked_list_t *list);
static inline bool single_linked_list_contains_ip(s_single_linked_list_t *list, s_single_linked_list_t *node);
static inline bool single_linked_list_structure_illegal_ip(s_single_linked_list_t *list);
static inline bool single_linked_list_structure_legal_ip(s_single_linked_list_t *list);
static inline bool skip_linked_list_contains_ip(s_skip_linked_list_t *list, s_skip_linked_list_t *node);
static inline bool skip_linked_list_exist_on_level(s_skip_linked_list_t *list, s_skip_linked_list_t *node, uint32 level);
static inline bool skip_linked_list_ordering_p(s_skip_linked_list_t *list);
static inline bool skip_linked_list_structure_legal_ip(s_skip_linked_list_t *list);
static inline s_doubly_linked_list_t * doubly_linked_list_create_i();
static inline s_doubly_linked_list_t * doubly_linked_list_merge_i(s_doubly_linked_list_t *m, s_doubly_linked_list_t *n);
static inline s_doubly_linked_list_t * doubly_linked_list_remove_i(s_doubly_linked_list_t **list);
static inline s_single_linked_list_t * single_linked_list_create_i(void);
static inline s_single_linked_list_t * single_linked_list_merge_i(s_single_linked_list_t *m, s_single_linked_list_t *n);
static inline s_single_linked_list_t * single_linked_list_previous_i(s_single_linked_list_t *list);
static inline s_single_linked_list_t * single_linked_list_remove_i(s_single_linked_list_t **list);
static inline s_skip_linked_list_t * skip_linked_list_find_key_i(s_skip_linked_list_t *list, sint32 key, uint32 lv);
static inline s_skip_linked_list_t * skip_linked_list_insert_before_head(s_skip_linked_list_t *list, s_skip_linked_list_t *tgt);
static inline s_skip_linked_list_t * skip_linked_list_insert_i(s_skip_linked_list_t **list, s_skip_linked_list_t *tgt);
static inline s_skip_linked_list_t * skip_linked_list_remove_i(s_skip_linked_list_t **list, s_skip_linked_list_t *tgt);
static inline s_skip_linked_list_t * skip_linked_list_remove_with_previous_list(s_skip_linked_list_t *tgt, s_skip_linked_list_t **pre_list, uint32 lv);
static inline uint32 doubly_linked_list_length_i(s_doubly_linked_list_t *list);
static inline uint32 single_linked_list_length_i(s_single_linked_list_t *list);
static inline uint32 skip_linked_list_length_i(s_skip_linked_list_t *list);
static inline void doubly_linked_list_initial_i(s_doubly_linked_list_t *list);
static inline void doubly_linked_list_insert_after_i(s_doubly_linked_list_t *list, s_doubly_linked_list_t *node);
static inline void doubly_linked_list_insert_before_i(s_doubly_linked_list_t *list, s_doubly_linked_list_t *node);
static inline void single_linked_list_initial_i(s_single_linked_list_t *list);
static inline void single_linked_list_insert_after_i(s_single_linked_list_t *list, s_single_linked_list_t *node);
static inline void single_linked_list_insert_before_i(s_single_linked_list_t *list, s_single_linked_list_t *node);
static inline void skip_linked_list_initial_i(s_skip_linked_list_t *list, sint32 key);
static inline void skip_linked_list_insert_update_with_lv(s_skip_linked_list_t *tgt, s_skip_linked_list_t **prev_list, uint32 lv);
static inline void skip_linked_list_node_clean(s_skip_linked_list_t *list);
static inline void skip_linked_list_remove_head(s_skip_linked_list_t *list);
static inline void skip_linked_list_remove_on_level(s_skip_linked_list_t *list, s_skip_linked_list_t *removed, uint32 level);
uint32 doubly_linked_list_length(s_doubly_linked_list_t *list);
uint32 single_linked_list_length(s_single_linked_list_t *list);
uint32 skip_linked_list_length(s_skip_linked_list_t *list);
void doubly_linked_list_destroy(s_doubly_linked_list_t **list);
void doubly_linked_list_initial(s_doubly_linked_list_t *list);
void doubly_linked_list_insert_after(s_doubly_linked_list_t *list, s_doubly_linked_list_t *node);
void doubly_linked_list_insert_before(s_doubly_linked_list_t *list, s_doubly_linked_list_t *node);
void doubly_linked_list_iterate(s_doubly_linked_list_t *list, void (*handler)(void *));
void doubly_linked_list_next_set(s_doubly_linked_list_t *list, s_doubly_linked_list_t *next);
void doubly_linked_list_previous_set(s_doubly_linked_list_t *list, s_doubly_linked_list_t *previous);
void single_linked_list_destroy(s_single_linked_list_t **list);
void single_linked_list_initial(s_single_linked_list_t *list);
void single_linked_list_insert_after(s_single_linked_list_t *list, s_single_linked_list_t *node);
void single_linked_list_insert_before(s_single_linked_list_t *list, s_single_linked_list_t *node);
void single_linked_list_iterate(s_single_linked_list_t *list, void (*handler)(void *));
void single_linked_list_next_set(s_single_linked_list_t *list, s_single_linked_list_t *next);
void skip_linked_list_destroy(s_skip_linked_list_t **list);
void skip_linked_list_initial(s_skip_linked_list_t *list);
void skip_linked_list_iterate(s_skip_linked_list_t *list, void (*handler)(void *));
void skip_linked_list_key_set(s_skip_linked_list_t *list, sint32 key);
void skip_linked_list_next_set(s_skip_linked_list_t *list, s_skip_linked_list_t *next);

#endif

