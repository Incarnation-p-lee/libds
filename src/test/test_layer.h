#ifndef TEST_LAYER_H
#define TEST_LAYER_H

static const struct test_layer_table single_linked_list_interface[] = {
    {
        "initial",
        NULL,
        {
            &utest_single_linked_list_initial,
            &ptest_single_linked_list_initial,
        },
    },
    {
        "create",
        NULL,
        {
            &utest_single_linked_list_create,
            &ptest_single_linked_list_create,
        },
    },
    {
        "node_create",
        NULL,
        {
            &utest_single_linked_list_node_create,
            &ptest_single_linked_list_node_create,
        },
    },
    {
        "previous",
        NULL,
        {
            &utest_single_linked_list_previous,
            &ptest_single_linked_list_previous,
        },
    },
    {
        "insert_ptr_before",
        NULL,
        {
            &utest_single_linked_list_insert_ptr_before,
            &ptest_single_linked_list_insert_ptr_before,
        },
    },
    {
        "insert_ptr_after",
        NULL,
        {
            &utest_single_linked_list_insert_ptr_after,
            &ptest_single_linked_list_insert_ptr_after,
        },
    },
    {
        "insert_before",
        NULL,
        {
            &utest_single_linked_list_insert_before,
            &ptest_single_linked_list_insert_before,
        },
    },
    {
        "insert_after",
        NULL,
        {
            &utest_single_linked_list_insert_after,
            &ptest_single_linked_list_insert_after,
        },
    },
    {
        "destroy",
        NULL,
        {
            &utest_single_linked_list_destroy,
            &ptest_single_linked_list_destroy,
        },
    },
    {
        "length",
        NULL,
        {
            &utest_single_linked_list_length,
            &ptest_single_linked_list_length,
        },
    },
    {
        "node_by_index",
        NULL,
        {
            &utest_single_linked_list_node_by_index,
            &ptest_single_linked_list_node_by_index,
        },
    },
    {
        "contains_p",
        NULL,
        {
            &utest_single_linked_list_contains_p,
            &ptest_single_linked_list_contains_p,
        },
    },
    {
        "node_copy",
        NULL,
        {
            &utest_single_linked_list_node_copy,
            &ptest_single_linked_list_node_copy,
        },
    },
    {
        "remove",
        NULL,
        {
            &utest_single_linked_list_remove,
            &ptest_single_linked_list_remove,
        },
    },
    {
        "remove_and_destroy",
        NULL,
        {
            &utest_single_linked_list_remove_and_destroy,
            &ptest_single_linked_list_remove_and_destroy,
        },
    },
    {
        "iterate",
        NULL,
        {
            &utest_single_linked_list_iterate,
            &ptest_single_linked_list_iterate,
        },
    },
    {
        "merge",
        NULL,
        {
            &utest_single_linked_list_merge,
            &ptest_single_linked_list_merge,
        },
    },
    {NULL,                      NULL, {NULL, NULL},},
};

static const struct test_layer_table doubly_linked_list_interface[] = {
    {
        "create",
        NULL,
        {
            &utest_doubly_linked_list_create,
            &ptest_doubly_linked_list_create,
        },
    },
    {
        "node_create",
        NULL,
        {
            &utest_doubly_linked_list_node_create,
            &ptest_doubly_linked_list_node_create,
        },
    },
    {
        "initial",
        NULL,
        {
            &utest_doubly_linked_list_initial,
            &ptest_doubly_linked_list_initial,
        },
    },
    {
        "insert_ptr_before",
        NULL,
        {
            &utest_doubly_linked_list_insert_ptr_before,
            &ptest_doubly_linked_list_insert_ptr_before,
        },
    },
    {
        "insert_ptr_after",
        NULL,
        {
            &utest_doubly_linked_list_insert_ptr_after,
            &ptest_doubly_linked_list_insert_ptr_after,
        },
    },
    {
        "insert_before",
        NULL,
        {
            &utest_doubly_linked_list_insert_before,
            &ptest_doubly_linked_list_insert_before,
        },
    },
    {
        "insert_after",
        NULL,
        {
            &utest_doubly_linked_list_insert_after,
            &ptest_doubly_linked_list_insert_after,
        },
    },
    {
        "destroy",
        NULL,
        {
            &utest_doubly_linked_list_destroy,
            &ptest_doubly_linked_list_destroy,
        },
    },
    {
        "length",
        NULL,
        {
            &utest_doubly_linked_list_length,
            &ptest_doubly_linked_list_length,
        },
    },
    {
        "node_by_index",
        NULL,
        {
            &utest_doubly_linked_list_node_by_index,
            &ptest_doubly_linked_list_node_by_index,
        },
    },
    {
        "contains_p",
        NULL,
        {
            &utest_doubly_linked_list_contains_p,
            &ptest_doubly_linked_list_contains_p,
        },
    },
    {
        "node_copy",
        NULL,
        {
            &utest_doubly_linked_list_node_copy,
            &ptest_doubly_linked_list_node_copy,
        },
    },
    {
        "remove",
        NULL,
        {
            &utest_doubly_linked_list_remove,
            &ptest_doubly_linked_list_remove,
        },
    },
    {
        "remove_and_destroy",
        NULL,
        {
            &utest_doubly_linked_list_remove_and_destroy,
            &ptest_doubly_linked_list_remove_and_destroy,
        },
    },
    {
        "iterate",
        NULL,
        {
            &utest_doubly_linked_list_iterate,
            &ptest_doubly_linked_list_iterate,
        },
    },
    {
        "merge",
        NULL,
        {
            &utest_doubly_linked_list_merge,
            &ptest_doubly_linked_list_merge,
        },
    },
    {NULL,                      NULL, {NULL, NULL},},
};

static const struct test_layer_table skip_linked_list_interface[] = {
    {
        "create",
        NULL,
        {
            &utest_skip_linked_list_create,
            &ptest_skip_linked_list_create,
        },
    },
    {
        "initial",
        NULL,
        {
            &utest_skip_linked_list_initial,
            &ptest_skip_linked_list_initial,
        },
    },
    {
        "node_create",
        NULL,
        {
            &utest_skip_linked_list_node_create,
            &ptest_skip_linked_list_node_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &utest_skip_linked_list_destroy,
            &ptest_skip_linked_list_destroy,
        },
    },
    {
        "length",
        NULL,
        {
            &utest_skip_linked_list_length,
            &ptest_skip_linked_list_length,
        },
    },
    {
        "find_key",
        NULL,
        {
            &utest_skip_linked_list_find_key,
            &ptest_skip_linked_list_find_key,
        },
    },
    {
        "key_contains_p",
        NULL,
        {
            &utest_skip_linked_list_key_contains_p,
            &ptest_skip_linked_list_key_contains_p,
        },
    },
    {
        "insert",
        NULL,
        {
            &utest_skip_linked_list_insert,
            &ptest_skip_linked_list_insert,
        },
    },
    {
        "node_by_index",
        NULL,
        {
            &utest_skip_linked_list_node_by_index,
            &ptest_skip_linked_list_node_by_index,
        },
    },
    {
        "remove",
        NULL,
        {
            &utest_skip_linked_list_remove,
            &ptest_skip_linked_list_remove,
        },
    },
    {
        "remove_and_destroy",
        NULL,
        {
            &utest_skip_linked_list_remove_and_destroy,
            &ptest_skip_linked_list_remove_and_destroy,
        },
    },
    {
        "iterate",
        NULL,
        {
            &utest_skip_linked_list_iterate,
            &ptest_skip_linked_list_iterate,
        },
    },
    {
        "merge",
        NULL,
        {
            &utest_skip_linked_list_merge,
            &ptest_skip_linked_list_merge,
        },
    },
    {NULL,                      NULL, {NULL, NULL},},
};

static const struct test_layer_table array_stack[] = {
    {
        "create",
        NULL,
        {
            &utest_array_stack_create,
            &performance_test_array_stack_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &utest_array_stack_destroy,
            &performance_test_array_stack_destroy,
        },
    },
    {
        "resize",
        NULL,
        {
            &utest_array_stack_resize,
            &performance_test_array_stack_resize,
        },
    },
    {
        "full_p",
        NULL,
        {
            &utest_array_stack_full_p,
            &performance_test_array_stack_full_p,
        },
    },
    {
        "capacity",
        NULL,
        {
            &utest_array_stack_capacity,
            &performance_test_array_stack_capacity,
        },
    },
    {
        "rest",
        NULL,
        {
            &utest_array_stack_rest,
            &performance_test_array_stack_space_rest,
        },
    },
    {
        "push",
        NULL,
        {
            &utest_array_stack_push,
            &performance_test_array_stack_push,
        },
    },
    {
        "pop",
        NULL,
        {
            &utest_array_stack_pop,
            &performance_test_array_stack_pop,
        },
    },
    {
        "empty_p",
        NULL,
        {
            &utest_array_stack_empty_p,
            &performance_test_array_stack_empty_p,
        },
    },
    {
        "cleanup",
        NULL,
        {
            &utest_array_stack_cleanup,
            &performance_test_array_stack_cleanup,
        },
    },
    {
        "iterate",
        NULL,
        {
            &utest_array_stack_iterate,
            &performance_test_array_stack_iterate,
        },
    },
    {NULL,           NULL, {NULL, NULL},},
};

static const struct test_layer_table linked_stack[] = {
    {
        "create",
        NULL,
        {
            &utest_linked_stack_create,
            &performance_test_linked_stack_create,
        },
    },
    {   "destroy",
        NULL,
        {
            &utest_linked_stack_destroy,
            &performance_test_linked_stack_destroy,
        },
    },
    {
        "space_expand",
        NULL,
        {
            &utest_linked_stack_resize,
            &performance_test_linked_stack_space_expand,
        },
    },
    {
        "full_p",
        NULL,
        {
            &utest_linked_stack_full_p,
            &performance_test_linked_stack_full_p,
        },
    },
    {
        "rest",
        NULL,
        {
            &utest_linked_stack_rest,
            &performance_test_linked_stack_space_rest,
        },
    },
    {
        "capacity",
        NULL,
        {
            &utest_linked_stack_capacity,
            &performance_test_linked_stack_capacity,
        },
    },
    {
        "push",
        NULL,
        {
            &utest_linked_stack_push,
            &performance_test_linked_stack_push,
        },
    },
    {
        "pop",
        NULL,
        {
            &utest_linked_stack_pop,
            &performance_test_linked_stack_pop,
        },
    },
    {
        "empty_p",
        NULL,
        {
            &utest_linked_stack_empty_p,
            &performance_test_linked_stack_empty_p,
        },
    },
    {
        "cleanup",
        NULL,
        {
            &utest_linked_stack_cleanup,
            &performance_test_linked_stack_cleanup,
        },
    },
    {
        "iterate",
        NULL,
        {
            &utest_linked_stack_iterate,
            &performance_test_linked_stack_iterate,
        },
    },
    {NULL,           NULL, {NULL, NULL},},
};

static const struct test_layer_table array_queue[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_array_queue_struct_field,
            &performance_test_array_queue_struct_field,
        },
    },
    {   "create",
        NULL,
        {
            &unit_test_array_queue_create,
            &performance_test_array_queue_create,
        },
    },
    {   "destroy",
        NULL,
        {
            &unit_test_array_queue_destroy,
            &performance_test_array_queue_destroy,
        },
    },
    {
        "space_expand",
        NULL,
        {
            &unit_test_array_queue_space_expand,
            &performance_test_array_queue_space_expand,
        },
    },
    {
        "capacity",
        NULL,
        {
            &unit_test_array_queue_capacity,
            &performance_test_array_queue_capacity,
        },
    },
    {
        "space_rest",
        NULL,
        {
            &unit_test_array_queue_space_rest,
            &performance_test_array_queue_space_rest,
        },
    },
    {
        "full_p",
        NULL,
        {
            &unit_test_array_queue_full_p,
            &performance_test_array_queue_full_p,
        },
    },
    {
        "enter",
        NULL,
        {
            &unit_test_array_queue_enter,
            &performance_test_array_queue_enter,
        },
    },
    {   "leave",
        NULL,
        {
            &unit_test_array_queue_leave,
            &performance_test_array_queue_leave,
        },
    },
    {
        "empty_p",
        NULL,
        {
            &unit_test_array_queue_empty_p,
            &performance_test_array_queue_empty_p,
        },
    },
    {
        "cleanup",
        NULL,
        {
            &unit_test_array_queue_cleanup,
            &performance_test_array_queue_cleanup,
        },
    },
    {
        "iterate",
        NULL,
        {
            &unit_test_array_queue_iterate,
            &performance_test_array_queue_iterate,
        },
    },
    {NULL,           NULL, {NULL, NULL},},
};

static const struct test_layer_table stacked_queue[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_stacked_queue_struct_field,
            &performance_test_stacked_queue_struct_field,
        },
    },
    {   "create",
        NULL,
        {
            &unit_test_stacked_queue_create,
            &performance_test_stacked_queue_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &unit_test_stacked_queue_destroy,
            &performance_test_stacked_queue_destroy,
        },
    },
    {
        "space_expand",
        NULL,
        {
            &unit_test_stacked_queue_space_expand,
            &performance_test_stacked_queue_space_expand,
        },
    },
    {
        "space_rest",
        NULL,
        {
            &unit_test_stacked_queue_space_rest,
            &performance_test_stacked_queue_space_rest,
        },
    },
    {
        "full_p",
        NULL,
        {
            &unit_test_stacked_queue_full_p,
            &performance_test_stacked_queue_full_p,
        },
    },
    {
        "capacity",
        NULL,
        {
            &unit_test_stacked_queue_capacity,
            &performance_test_stacked_queue_capacity,
        },
    },
    {
        "enter",
        NULL,
        {
            &unit_test_stacked_queue_enter,
            &performance_test_stacked_queue_enter,
        },
    },
    {
        "leave",
        NULL,
        {
            &unit_test_stacked_queue_leave,
            &performance_test_stacked_queue_leave,
        },
    },
    {
        "empty_p",
        NULL,
        {
            &unit_test_stacked_queue_empty_p,
            &performance_test_stacked_queue_empty_p,
        },
    },
    {
        "cleanup",
        NULL,
        {
            &unit_test_stacked_queue_cleanup,
            &performance_test_stacked_queue_cleanup,
        },
    },
    {
        "iterate",
        NULL,
        {
            &unit_test_stacked_queue_iterate,
            &performance_test_stacked_queue_iterate,
        },
    },
    {NULL,           NULL, {NULL, NULL},},
};

static const struct test_layer_table doubly_end_queue[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_doubly_end_queue_struct_field,
            &performance_test_doubly_end_queue_struct_field,
        },
    },
    {
        "create",
        NULL,
        {
            &unit_test_doubly_end_queue_create,
            &performance_test_doubly_end_queue_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &unit_test_doubly_end_queue_destroy,
            &performance_test_doubly_end_queue_destroy,
        },
    },
    {
        "length",
        NULL,
        {
            &unit_test_doubly_end_queue_length,
            &performance_test_doubly_end_queue_length,
        },
    },
    {
        "empty_p",
        NULL,
        {
            &unit_test_doubly_end_queue_empty_p,
            &performance_test_doubly_end_queue_empty_p,
        },
    },
    {
        "head_enter",
        NULL,
        {
            &unit_test_doubly_end_queue_head_enter,
            &performance_test_doubly_end_queue_head_enter,
        },
    },
    {
        "head_leave",
        NULL,
        {
            &unit_test_doubly_end_queue_head_leave,
            &performance_test_doubly_end_queue_head_leave,
        },
    },
    {
        "tail_enter",
        NULL,
        {
            &unit_test_doubly_end_queue_tail_enter,
            &performance_test_doubly_end_queue_tail_enter,
        },
    },
    {
        "tail_leave",
        NULL,
        {
            &unit_test_doubly_end_queue_tail_leave,
            &performance_test_doubly_end_queue_tail_leave,
        },
    },
    {
        "cleanup",
        NULL,
        {
            &unit_test_doubly_end_queue_cleanup,
            &performance_test_doubly_end_queue_cleanup,
        },
    },
    {
        "iterate",
        NULL,
        {
            &unit_test_doubly_end_queue_iterate,
            &performance_test_doubly_end_queue_iterate,
        },
    },
    {NULL,           NULL, {NULL, NULL},},
};

static const struct test_layer_table binary_search_tree[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_binary_search_tree_struct_field,
            &performance_test_binary_search_tree_struct_field,
        },
    },
    {
        "create",
        NULL,
        {
            &unit_test_binary_search_tree_create,
            &performance_test_binary_search_tree_create,
        },
    },
    {
        "node_create",
        NULL,
        {
            &unit_test_binary_search_tree_node_create,
            &performance_test_binary_search_tree_node_create,
        },
    },
    {
        "initial",
        NULL,
        {
            &unit_test_binary_search_tree_initial,
            &performance_test_binary_search_tree_initial,
        },
    },
    {
        "node_initial",
        NULL,
        {
            &unit_test_binary_search_tree_node_initial,
            &performance_test_binary_search_tree_node_initial,
        },
    },
    {
        "destroy",
        NULL,
        {
            &unit_test_binary_search_tree_destroy,
            &performance_test_binary_search_tree_destroy,
        },
    },
    {
        "node_find",
        NULL,
        {
            &unit_test_binary_search_tree_node_find,
            &performance_test_binary_search_tree_node_find,
        },
    },
    {
        "node_find_min",
        NULL,
        {
            &unit_test_binary_search_tree_node_find_min,
            &performance_test_binary_search_tree_node_find_min,
        },
    },
    {
        "node_find_max",
        NULL,
        {
            &unit_test_binary_search_tree_node_find_max,
            &performance_test_binary_search_tree_node_find_max,
        },
    },
    {
        "height",
        NULL,
        {
            &unit_test_binary_search_tree_height,
            &performance_test_binary_search_tree_height,
        },
    },
    {
        "node_contains_p",
        NULL,
        {
            &unit_test_binary_search_tree_node_contains_p,
            &performance_test_binary_search_tree_node_contains_p,
        },
    },
    {
        "node_insert",
        NULL,
        {
            &unit_test_binary_search_tree_node_insert,
            &performance_test_binary_search_tree_node_insert,
        },
    },
    {
        "node_remove",
        NULL,
        {
            &unit_test_binary_search_tree_node_remove,
            &performance_test_binary_search_tree_node_remove,
        },
    },
    {
        "node_remove_and_destroy",
        NULL,
        {
            &unit_test_binary_search_tree_node_remove_and_destroy,
            &performance_test_binary_search_tree_node_remove_and_destroy,
        },
    },
    {
        "iterate",
        NULL,
        {
            &unit_test_binary_search_tree_iterate,
            &performance_test_binary_search_tree_iterate,
        },},
    {NULL,                      NULL, {NULL, NULL},},
};

static const struct test_layer_table avl_tree[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_avl_tree_struct_field,
            &performance_test_avl_tree_struct_field,
        },
    },
    {
        "create",
        NULL,
        {
            &unit_test_avl_tree_create,
            &performance_test_avl_tree_create,
        },
    },
    {
        "node_create",
        NULL,
        {
            &unit_test_avl_tree_node_create,
            &performance_test_avl_tree_node_create,
        },
    },
    {
        "initial",
        NULL,
        {
            &unit_test_avl_tree_initial,
            &performance_test_avl_tree_initial,
        },
    },
    {
        "node_initial",
        NULL,
        {
            &unit_test_avl_tree_node_initial,
            &performance_test_avl_tree_node_initial,
        },
    },
    {
        "destroy",
        NULL,
        {
            &unit_test_avl_tree_destroy,
            &performance_test_avl_tree_destroy,
        },},
    {
        "node_find",
        NULL,
        {
            &unit_test_avl_tree_node_find,
            &performance_test_avl_tree_node_find,
        },
    },
    {   "node_find_min",
        NULL,
        {
            &unit_test_avl_tree_node_find_min,
            &performance_test_avl_tree_node_find_min,
        },
    },
    {
        "node_find_max",
        NULL,
        {
            &unit_test_avl_tree_node_find_max,
            &performance_test_avl_tree_node_find_max,
        },
    },
    {
        "node_contains_p",
        NULL,
        {
            &unit_test_avl_tree_node_contains_p,
            &performance_test_avl_tree_node_contains_p,
        },
    },
    {
        "balanced_p",
        NULL,
        {
            &unit_test_avl_tree_balanced_p,
            &performance_test_avl_tree_balanced_p,
        },},
    {
        "node_insert",
        NULL,
        {
            &unit_test_avl_tree_node_insert,
            &performance_test_avl_tree_node_insert,
        },
    },
    {
        "node_remove",
        NULL,
        {
            &unit_test_avl_tree_node_remove,
            &performance_test_avl_tree_node_remove,
        },
    },
    {
        "node_remove_and_destroy",
        NULL,
        {
            &unit_test_avl_tree_node_remove_and_destroy,
            &performance_test_avl_tree_node_remove_and_destroy,
        },
    },
    {
        "iterate",
        NULL,
        {
            &unit_test_avl_tree_iterate,
            &performance_test_avl_tree_iterate,
        },
    },
    {NULL,                      NULL, {NULL,},},
};

static const struct test_layer_table splay_tree[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_splay_tree_struct_field,
            &performance_test_splay_tree_struct_field,
        },
    },
    {
        "create",
        NULL,
        {
            &unit_test_splay_tree_create,
            &performance_test_splay_tree_create,
        },
    },
    {
        "node_create",
        NULL,
        {
            &unit_test_splay_tree_node_create,
            &performance_test_splay_tree_node_create,
        },
    },
    {
        "initial",
        NULL,
        {
            &unit_test_splay_tree_initial,
            &performance_test_splay_tree_initial,
        },
    },
    {
        "node_initial",
        NULL,
        {
            &unit_test_splay_tree_node_initial,
            &performance_test_splay_tree_node_initial,
        },
    },
    {
        "destroy",
        NULL,
        {
            &unit_test_splay_tree_destroy,
            &performance_test_splay_tree_destroy,
        },
    },
    {
        "node_find",
        NULL,
        {
            &unit_test_splay_tree_node_find,
            &performance_test_splay_tree_node_find,
        },
    },
    {
        "node_find_min",
        NULL,
        {
            &unit_test_splay_tree_node_find_min,
            &performance_test_splay_tree_node_find_min,
        },
    },
    {
        "node_find_max",
        NULL,
        {
            &unit_test_splay_tree_node_find_max,
            &performance_test_splay_tree_node_find_max,
        },
    },
    {
        "height",
        NULL,
        {
            &unit_test_splay_tree_height,
            &performance_test_splay_tree_height,
        },
    },
    {
        "node_contains_p",
        NULL,
        {
            &unit_test_splay_tree_node_contains_p,
            &performance_test_splay_tree_node_contains_p,
        },
    },
    {
        "node_insert",
        NULL,
        {
            &unit_test_splay_tree_node_insert,
            &performance_test_splay_tree_node_insert,
        },
    },
    {
        "node_remove",
        NULL,
        {
            &unit_test_splay_tree_node_remove,
            &performance_test_splay_tree_node_remove,
        },
    },
    {
        "node_remove_and_destroy",
        NULL,
        {
            &unit_test_splay_tree_node_remove_and_destroy,
            &performance_test_splay_tree_node_remove_and_destroy,
        },
    },
    {
        "iterate",
        NULL,
        {
            &unit_test_splay_tree_iterate,
            &performance_test_splay_tree_iterate,
        },
    },
    {NULL,                      NULL, {NULL,},},
};

static const struct test_layer_table separate_chain_hash[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_separate_chain_hash_struct_field,
            &performance_test_separate_chain_hash_struct_field,
        },
    },
    {
        "create",
        NULL,
        {
            &unit_test_separate_chain_hash_create,
            &performance_test_separate_chain_hash_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &unit_test_separate_chain_hash_destroy,
            &performance_test_separate_chain_hash_destroy,
        },
    },
    {
        "load_factor_calculate",
        NULL,
        {
            &unit_test_separate_chain_hash_load_factor_calculate,
            &performance_test_separate_chain_hash_load_factor_calculate,
        },
    },
    {
        "insert",
        NULL,
        {
            &unit_test_separate_chain_hash_insert,
            &performance_test_separate_chain_hash_insert,
        },
    },
    {
        "remove",
        NULL,
        {
            &unit_test_separate_chain_hash_remove,
            &performance_test_separate_chain_hash_remove,
        },
    },
    {
        "find",
        NULL,
        {
            &unit_test_separate_chain_hash_find,
            &performance_test_separate_chain_hash_find,
        },
    },
    {
        "rehashing",
        NULL,
        {
            &unit_test_separate_chain_hash_rehashing,
            &performance_test_separate_chain_hash_rehashing,
        },
    },
    {NULL,                    NULL, {NULL, NULL},},
};

static const struct test_layer_table open_addressing_hash[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_open_addressing_hash_struct_field,
            &performance_test_open_addressing_hash_struct_field,
        },
    },
    {
        "create",
        NULL,
        {
            &unit_test_open_addressing_hash_create,
            &performance_test_open_addressing_hash_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &unit_test_open_addressing_hash_destroy,
            &performance_test_open_addressing_hash_destroy,
        },
    },
    {
        "load_factor_calculate",
        NULL,
        {
            &unit_test_open_addressing_hash_load_factor_calculate,
            &performance_test_open_addressing_hash_load_factor_calculate,
        },
    },
    {
        "insert",
        NULL,
        {
            &unit_test_open_addressing_hash_insert,
            &performance_test_open_addressing_hash_insert,
        },},
    {
        "remove",
        NULL,
        {
            &unit_test_open_addressing_hash_remove,
            &performance_test_open_addressing_hash_remove,
        },
    },
    {
        "find",
        NULL,
        {
            &unit_test_open_addressing_hash_find,
            &performance_test_open_addressing_hash_find,
        },
    },
    {
        "rehashing",
        NULL,
        {
            &unit_test_open_addressing_hash_rehashing,
            &performance_test_open_addressing_hash_rehashing,
        },
    },
    {NULL,                    NULL, {NULL, NULL},},
};

static const struct test_layer_table minimal_heap[] = {
    {
        "create",
        NULL,
        {
            &utest_minimal_heap_create,
            &ptest_minimal_heap_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &utest_minimal_heap_destroy,
            &ptest_minimal_heap_destroy,
        },
    },
    {
        "empty_p",
        NULL,
        {
            &utest_minimal_heap_empty_p,
            &ptest_minimal_heap_empty_p,
        },
    },
    {
        "full_p",
        NULL,
        {
            &utest_minimal_heap_full_p,
            &ptest_minimal_heap_full_p,
        },
    },
    {
        "cleanup",
        NULL,
        {
            &utest_minimal_heap_cleanup,
            &ptest_minimal_heap_cleanup,
        },
    },
    {
        "get_min",
        NULL,
        {
            &utest_minimal_heap_get_min,
            &ptest_minimal_heap_get_min,
        },
    },
    {
        "insert",
        NULL,
        {
            &utest_minimal_heap_insert,
            &ptest_minimal_heap_insert,
        },
    },
    {
        "remove_min",
        NULL,
        {
            &utest_minimal_heap_remove_min,
            &ptest_minimal_heap_remove_min,
        },
    },
    {
        "remove",
        NULL,
        {
            &utest_minimal_heap_remove,
            &ptest_minimal_heap_remove,
        },
    },
    {
        "decrease_nice",
        NULL,
        {
            &utest_minimal_heap_decrease_nice,
            &ptest_minimal_heap_decrease_nice,
        },
    },
    {
        "increase_nice",
        NULL,
        {
            &utest_minimal_heap_increase_nice,
            &ptest_minimal_heap_increase_nice,
        },
    },
    {
        "build",
        NULL,
        {
            &utest_minimal_heap_build,
            &ptest_minimal_heap_build,
        },
    },
    {NULL,                          NULL, {NULL, NULL},},
};

static const struct test_layer_table maximal_heap[] = {
    {
        "create",
        NULL,
        {
            &utest_maximal_heap_create,
            &ptest_maximal_heap_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &utest_maximal_heap_destroy,
            &ptest_maximal_heap_destroy,
        },
    },
    {
        "empty_p",
        NULL,
        {
            &utest_maximal_heap_empty_p,
            &ptest_maximal_heap_empty_p,
        },
    },
    {
        "full_p",
        NULL,
        {
            &utest_maximal_heap_full_p,
            &ptest_maximal_heap_full_p,
        },
    },
    {
        "cleanup",
        NULL,
        {
            &utest_maximal_heap_cleanup,
            &ptest_maximal_heap_cleanup,
        },
    },
    {
        "get_max",
        NULL,
        {
            &utest_maximal_heap_get_max,
            &ptest_maximal_heap_get_max,
        },
    },
    {
        "insert",
        NULL,
        {
            &utest_maximal_heap_insert,
            &ptest_maximal_heap_insert,
        },
    },
    {
        "remove",
        NULL,
        {
            &utest_maximal_heap_remove,
            &ptest_maximal_heap_remove,
        },
    },
    {
        "decrease_nice",
        NULL,
        {
            &utest_maximal_heap_decrease_nice,
            &ptest_maximal_heap_decrease_nice,
        },
    },
    {
        "increase_nice",
        NULL,
        {
            &utest_maximal_heap_increase_nice,
            &ptest_maximal_heap_increase_nice,
        },
    },
    {
        "build",
        NULL,
        {
            &utest_maximal_heap_build,
            &ptest_maximal_heap_build,
        },
    },
    {NULL,                          NULL, {NULL, NULL},},
};

#if 0
static const struct test_layer_table min_max_heap[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_min_max_heap_struct_field,
            &performance_test_min_max_heap_struct_field,
        },
    },
    {
        "create",
        NULL,
        {
            &unit_test_min_max_heap_create,
            &performance_test_min_max_heap_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &unit_test_min_max_heap_destroy,
            &performance_test_min_max_heap_destroy,
        },
    },
    {
        "empty_p",
        NULL,
        {
            &unit_test_min_max_heap_empty_p,
            &performance_test_min_max_heap_empty_p,
        },
    },
    {
        "full_p",
        NULL,
        {
            &unit_test_min_max_heap_full_p,
            &performance_test_min_max_heap_full_p,
        },
    },
    {
        "cleanup",
        NULL,
        {
            &unit_test_min_max_heap_cleanup,
            &performance_test_min_max_heap_cleanup,
        },
    },
    {
        "node_find",
        NULL,
        {
            &unit_test_min_max_heap_node_find,
            &performance_test_min_max_heap_node_find,
        },
    },
    {
        "node_find_min",
        NULL,
        {
            &unit_test_min_max_heap_node_find_min,
            &performance_test_min_max_heap_node_find_min,
        },
    },
    {
        "node_find_max",
        NULL,
        {
            &unit_test_min_max_heap_node_find_max,
            &performance_test_min_max_heap_node_find_max,
        },
    },
    {
        "node_insert",
        NULL,
        {
            &unit_test_min_max_heap_node_insert,
            &performance_test_min_max_heap_node_insert,
        },
    },
    {
        "node_depth",
        NULL,
        {
            &unit_test_min_max_heap_node_depth,
            &performance_test_min_max_heap_node_depth,
        },
    },
    {
        "node_remove_min",
        NULL,
        {
            &unit_test_min_max_heap_node_remove_min,
            &performance_test_min_max_heap_node_remove_min,
        },
    },
    {
        "node_remove_max",
        NULL,
        {
            &unit_test_min_max_heap_node_remove_max,
            &performance_test_min_max_heap_node_remove_max,
        },
    },
    {
        "node_remove_min_and_destroy",
        NULL,
        {
            &unit_test_min_max_heap_node_remove_min_and_destroy,
            &performance_test_min_max_heap_node_remove_min_and_destroy,
        },
    },
    {
        "node_remove_max_and_destroy",
        NULL,
        {
            &unit_test_min_max_heap_node_remove_max_and_destroy,
            &performance_test_min_max_heap_node_remove_max_and_destroy,
        },
    },
    {
        "node_remove",
        NULL,
        {
            &unit_test_min_max_heap_node_remove,
            &performance_test_min_max_heap_node_remove,
        },
    },
    {
        "node_remove_and_destroy",
        NULL,
        {
            &unit_test_min_max_heap_node_remove_and_destroy,
            &performance_test_min_max_heap_node_remove_and_destroy,
        },
    },
    {
        "node_decrease_nice",
        NULL,
        {
            &unit_test_min_max_heap_node_decrease_nice,
            &performance_test_min_max_heap_node_decrease_nice,
        },
    },
    {
        "node_increase_nice",
        NULL,
        {
            &unit_test_min_max_heap_node_increase_nice,
            &performance_test_min_max_heap_node_increase_nice,
        },
    },
    {NULL,                          NULL, {NULL, NULL},},
};
#endif

static const struct test_layer_table leftist_heap[] = {
    {
        "struct_field",
        NULL,
        {
            &unit_test_leftist_heap_struct_field,
            &performance_test_leftist_heap_struct_field,
        },
    },
    {
        "create",
        NULL,
        {
            &unit_test_leftist_heap_create,
            &performance_test_leftist_heap_create,
        },
    },
    {
        "node_create",
        NULL,
        {
            &unit_test_leftist_heap_node_create,
            &performance_test_leftist_heap_node_create,
        },
    },
    {
        "destroy",
        NULL,
        {
            &unit_test_leftist_heap_destroy,
            &performance_test_leftist_heap_destroy,
        },
    },
    {
        "get_min",
        NULL,
        {
            &unit_test_leftist_heap_get_min,
            &performance_test_leftist_heap_get_min,
        },
    },
    {
        "insert",
        NULL,
        {
            &unit_test_leftist_heap_insert,
            &performance_test_leftist_heap_insert,
        },
    },
    {
        "merge",
        NULL,
        {
            &unit_test_leftist_heap_merge,
            &performance_test_leftist_heap_merge,
        },
    },
    {
        "remove_min",
        NULL,
        {
            &unit_test_leftist_heap_remove_min,
            &performance_test_leftist_heap_remove_min,
        },
    },
    {
        "remove_min_and_destroy",
        NULL,
        {
            &unit_test_leftist_heap_remove_min_and_destroy,
            &performance_test_leftist_heap_remove_min_and_destroy,
        },
    },
    {NULL,                          NULL, {NULL, NULL},},
};
/*-----------------------------------------------------------------*/
/*-------------------------- END OF INTERFACE LAYER OF LAYER TABLE */
/*-----------------------------------------------------------------*/


/*-----------------------------------------------------------------*/
/* IMPLEMENTATION LAYER OF LAYER TABLE ----------------------------*/
/*-----------------------------------------------------------------*/
static const struct test_layer_table test_linked_list_implement[] = {
    {"single", single_linked_list_interface, {NULL, NULL},},
    {"doubly", doubly_linked_list_interface, {NULL, NULL},},
    {"skip",   skip_linked_list_interface,   {NULL, NULL},},
    /* END POINT OF IMPLEMENT */
    {NULL,     NULL,                         {NULL, NULL},},
};

static const struct test_layer_table test_stack_implement[] = {
    {"array",  array_stack,  {NULL, NULL},},
    {"linked", linked_stack, {NULL, NULL},},
    /* END POINT OF IMPLEMENT */
    {NULL,     NULL,         {NULL, NULL},},
};

static const struct test_layer_table test_queue_implement[] = {
    {"array",      array_queue,      {NULL, NULL},},
    {"stacked",    stacked_queue,    {NULL, NULL},},
    {"doubly_end", doubly_end_queue, {NULL, NULL},},
    /* END POINT OF IMPLEMENT */
    {NULL,         NULL,             {NULL, NULL},},
};

static const struct test_layer_table test_tree_implement[] = {
    {"binary_search", binary_search_tree, {NULL, NULL},},
    {"avl",           avl_tree,           {NULL, NULL},},
    {"splay",         splay_tree,         {NULL, NULL},},
    /* END POINT OF IMPLEMENT */
    {NULL,            NULL,               {NULL, NULL},},
};

static const struct test_layer_table test_hash_implement[] = {
    {"separate_chain",  separate_chain_hash,  {NULL, NULL},},
    {"open_addressing", open_addressing_hash, {NULL, NULL},},
    /* END POINT OF IMPLEMENT */
    {NULL,              NULL,                 {NULL, NULL},},
};

static const struct test_layer_table test_heap_implement[] = {
    {"minimal", minimal_heap, {NULL, NULL},},
    {"maximal", maximal_heap, {NULL, NULL},},
    // {"min_max", min_max_heap, {NULL, NULL},},
    {"leftist", leftist_heap, {NULL, NULL},},
    /* END POINT OF IMPLEMENT */
    {NULL,      NULL,         {NULL, NULL},},
};
/*-----------------------------------------------------------------*/
/*--------------------- END OF IMPLEMENTATION LAYER OF LAYER TABLE */
/*-----------------------------------------------------------------*/


/*-----------------------------------------------------------------*/
/* CATEGORY LAYER OF LAYER TABLE ----------------------------------*/
/*-----------------------------------------------------------------*/
static const struct test_layer_table test_category[] = {
    {"linked_list", test_linked_list_implement, {NULL, NULL},},
    {"stack",       test_stack_implement,       {NULL, NULL},},
    {"queue",       test_queue_implement,       {NULL, NULL},},
    {"tree",        test_tree_implement,        {NULL, NULL},},
    {"hash",        test_hash_implement,        {NULL, NULL},},
    {"heap",        test_heap_implement,        {NULL, NULL},},
    /* END POINT OF CATEGORY */
    {NULL,          NULL,                       {NULL, NULL},}
};
/*-----------------------------------------------------------------*/
/*--------------------------- END OF CATEGORY LAYER OF LAYER TABLE */
/*-----------------------------------------------------------------*/

#endif
